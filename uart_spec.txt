0::The UART (Universal Asynchronous Receiver/Transmitter) core provides serial communication capabilities, which allow communication with modem or other external devices, like another computer using a serial cable and RS232 protocol.
231::This core is designed to be maximally compatible with the industry standard National Semiconductors’ 16550A device.
347::Features:
0::Table Start: "null"
0::Table End: "null"
357::List Start
357::WISHBONE interface in 32-bit or 8-bit data bus modes (selectable)
423::FIFO only operation
443::Register level and functionality compatibility with NS16550A (but not 16450).
521::Debug Interface in 32-bit data bus mode.
561::List End
562::Clocks table:
562::Table Start: "null"
562::Table End: "null"
562::Table Start: "null"
562::Table End: "null"
562::Table Start: "null"
562::Table End: "null"
576::In addition, there are 2 Clock Divisor registers that together form one 16-bit.
656::The registers can be accessed when the 7th (DLAB) bit of the Line Control Register is set to ‘1’.
754::At this time the above registers at addresses 0-1 can’t be accessed.
576::Table Start: "null"
576::Table End: "null"
576::Table Start: "null"
576::Table End: "null"
823::When using 32-bit data bus interface, additional read-only registers are available for debug purposes:
823::Table Start: "null"
823::Table End: "null"
926::This register allows enabling and disabling interrupt generation by the UART.
926::Table Start: "null"
926::Table End: "null"
1004::Reset Value: 00h
1004::Table Start: "null"
1004::Table End: "null"
1021::The IIR enables the programmer to retrieve what is the current highest priority pending interrupt.
1120::Bit 0 indicates that an interrupt is pending when it’s logic ‘0’.
1186::When it’s ‘1’ – no interrupt is pending.
1227::The following table displays the list of possible interrupts along with the bits they enable, priority, and their source and reset control.
1367::Bits 4 and 5: Logic ‘0’.
1392::Bits 6 and 7: Logic ‘1’ for compatibility reason.
1442::Reset Value: C1h
1367::Table Start: "null"
1367::Table End: "null"
1459::The FCR allows selection of the FIFO trigger level (the number of bytes in FIFO required to enable the Received Data Available interrupt).
1598::In addition, the FIFOs can be cleared using this register.
1657::Reset Value : 11000000b
1657::Table Start: "null"
1657::Table End: "null"
1681::The line control register allows the specification of the format of the asynchronous data communication used.
1791::A bit in the register also allows access to the Divisor Latches, which define the baud rate.
1884::A bit in the register also allows access to the Divisor Latches, which define the baud rate.
1977::Reading from the register is allowed to check the current settings of the communication.
2066::Reading from the register is allowed to check the current settings of the communication.
1681::Table Start: "null"
1681::Table End: "null"
2155::Reset Value: 00000011b
2178::The modem control register allows transferring control signals to a modem connected to the UART.
2275::Reset Value: 0
2275::Table Start: "null"
2275::Table End: "null"
2290::The register displays the current state of the modem control lines.
2358::Also, four bits also provide an indication in the state of one of the modem status lines.
2448::These bits are set to ‘1’ when a change in corresponding line has been detected and they are reset when the register is being read.
2290::Table Start: "null"
2290::Table End: "null"
2290::Table Start: "null"
2290::Table End: "null"
2580::The divisor latches can be accessed by setting the 7th bit of LCR to ‘1’.
2654::You should restore this bit to ‘0’ after setting the divisor latches in order to restore access to the other registers that occupy the same addresses.
2805::The 2 bytes form one 16-bit register, which is internally accessed as a single number.
2892::You should therefore set all 2 bytes of the register to ensure normal operation.
2973::The register is set to the default value of 0 on reset, which disables all serial I/O operations in order to ensure explicit setup of the register in the software.
3137::The value set should be equal to (system clock speed) / (16 x desired baud rate).
3219::The internal counter starts to work when the LSB of DL is written, so when setting the divisor, write the MSB first and the LSB last.
2580::Table Start: "null"
2580::Table End: "null"
3353::This register is only available when the core has 32-bit data bus and 5-bit address bus.
3442::It is read only and is provided for debugging purposes of chip testing as it is not part of the original UART16550 device specifications.
3580::Reading from the does not influence core’s bahaviour.
3634::This register is only available when the core has 32-bit data bus and 5-bit address bus.
3723::It is read only and is provided for debugging purposes of chip testing as it is not part of the original UART16550 device specifications.
3861::Reading from the does not influence core’s bahaviour.
3634::Table Start: "null"
3634::Table End: "null"
3915::This UART core is very similar in operation to the standard 16550 UART chip with the main exception being that only the FIFO mode is supported.
4059::The scratch register is removed, as it serves no purpose.
4117::This core can operate in 8-bit data bus mode or in 32-bit bus mode, which is now the default mode.
4216::The 32-bit mode is fully WISHBONE compatible and it uses the WISHBONE [SEL_I] signal to properly receive and return 8-bit data on 32-bit data bus.
4363::The 8-bit version might have problems in various WISHBONE implementations because a 32-bit master reading from 8-bit bus can expect data on different bytes of the 4-byte word, depending on the register address.
4574::Also, in 32-bit data bus mode, the [ADR_I] is 5 and not 3 bits wide.
4643::In addition, in the 32-bit data bus mode a debug interface is present in the system.
4728::This interface has 2 32-bit registers that can be read to provide non-intrusive look into the core’s registers and other internal values of importance.
4880::The selection between 32- and 8-bits data bus modes is performed by defining DATA_BUS_WIDTH_8 in uart_defines.v, uart_top.v or on the compiler/synthesizer tool command line.
3915::Table Start: "null"
3915::Table End: "null"
5054::Upon reset the core performs the following tasks:
5104::List Start
5104::The receiver and transmitter FIFOs are cleared.
5152::The receiver and transmitter shift registers are cleared
5209::The Divisor Latch register is set to 0.
5249::The Line Control Register is set to communication of 8 bits of data, no parity, 1 stop bit.
5341::All interrupts are disabled in the Interrupt Enable Register.
5402::List End
5403::For proper operation, perform the following:
5448::List Start
5448::Set the Line Control Register to the desired line control parameters.
5518::Set bit 7 to ‘1’ to allow access to the Divisor Latches.
5574::List End
5575::List Start
5575::Set the Divisor Latches, MSB first, LSB next.
5621::Set bit 7 of LCR to ‘0’ to disable access to Divisor Latches.
5683::At this time the transmission engine starts working and data can be sent and received.
5770::Set the FIFO trigger level.
5798::Generally, higher trigger level values produce less interrupt to the system, so setting it to 14 bytes is recommended if the system responds fast enough.
5952::Enable desired interrupts by setting appropriate bits in the Interrupt Enable register.
6039::List End
6040::Remember that (Input Clock Speed)/(Divisor Latch value) = 16 x the communication baud rate.
6132::Since the protocol is asynchronous and the sampling of the bits is performed in the perceived middle of the bit time, it is highly immune to small differences in the clocks of the sending and receiving sides, yet no such assumption should be made when calculating the Divisor Latch values.
6422::The core implements the WISNBONE SoC bus interface for communication with the system.
6508::It has an 8-bit data bus for compatibility reason.
6559::The core requires one interrupt.
6592::It requires 2 pads in the chip (serial in and serial out) and, optionally, another six modem control signals, which can otherwise be implemented using general purpose I/Os on the chip.
6777::The block diagram of the core is on the following page.
1173::Section start: "Introduction"
1185::Section End: "Introduction"
226::Section start: "Revision History"
242::Section End: "Revision History"
3051::Section start: "Clocks"
3057::Section End: "Clocks"
2339::Section start: "2.2 Other internal signals"
2365::Section End: "2.2 Other internal signals"
2587::Section start: "2.3 External (off-chip) connections"
2622::Section End: "2.3 External (off-chip) connections"
3317::Section start: "4.1 Registers list"
3335::Section End: "4.1 Registers list"
4531::Section start: "4.2 Interrupt Enable Register (IER)"
4566::Section End: "4.2 Interrupt Enable Register (IER)"
5106::Section start: "4.3 Interrupt Identification Register (IIR)"
5149::Section End: "4.3 Interrupt Identification Register (IIR)"
6451::Section start: "4.4 FIFO Control Register (FCR)"
6482::Section End: "4.4 FIFO Control Register (FCR)"
9080::Section start: "4.6 Modem Control Register (MCR)"
9112::Section End: "4.6 Modem Control Register (MCR)"
12423::Section start: "4.8 Modem Status Register (MSR)"
12454::Section End: "4.8 Modem Status Register (MSR)"
10012::Section start: "4.7 Line Status Register (LSR)"
10042::Section End: "4.7 Line Status Register (LSR)"
13426::Section start: "4.9 Divisor Latches"
13445::Section End: "4.9 Divisor Latches"
14230::Section start: "4.10 Debug 1"
14242::Section End: "4.10 Debug 1"
14864::Section start: "4.11 Debug 2"
14876::Section End: "4.11 Debug 2"
15591::Section start: "Operation"
15600::Section End: "Operation"
16763::Section start: "5.1 Initialization"
16781::Section End: "5.1 Initialization"
18375::Section start: "Architecture"
